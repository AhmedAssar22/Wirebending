#include <LiquidCrystal.h>
#include <AccelStepper.h>

#define feeder  0
#define bender  1
#define rotate  2
#define tool    3

#define UP                   LOW
#define DOWN                 HIGH
#define NUMBER_OF_SHAPES     5

#define resolution  16.0
#define step_angle  1.8
#define feeder_dia  34.0

#define convert_dis_to_steps(x)              ((float)(x*(((360.0*resolution)/step_angle)/(3.14*feeder_dia))))
#define convert_deg_to_steps_for_bender(y)   ((float)(y*((resolution*75.0)/(step_angle*35.0))))                          
#define convert_deg_to_steps_for_zAxis(y)    ((float)(y*((resolution*72.0)/(step_angle*22.0))))
#define angle_const_for_bender               (float)((resolution*75.0)/(step_angle*35.0))
#define angle_const_for_zAxis                (float)((resolution*72.0)/(step_angle*22.0))
#define distance_const                       (float)(((360.0*resolution)/step_angle)/(3.14*feeder_dia))

#define limitSwitch 13

// Define the stepper motors and the pins the will use
AccelStepper feederStepper(1, 5, 4); // (Type:driver, STEP, DIR)
AccelStepper zAxisStepper(1, 3, 2);
AccelStepper benderStepper(1, 1, 0);

LiquidCrystal lcd(A2, A1, A0, 8, 7, 6);

#define increament_butt 9
#define decreament_butt 10
#define excution_butt   11
#define bending_tool    A3

byte state;
String dataIn = "";
String manualStatus = "";
int count, dist, current_bending, current_zAxis;

const int anyShape[][2] = {
                           {feeder, 50},
                           {tool,  UP},
                           {feeder, 90},
                           {tool,  DOWN}
                            };


void setup() {
  //Serial.begin(115200);
  pinMode(increament_butt, INPUT_PULLUP);
  pinMode(decreament_butt, INPUT_PULLUP);
  pinMode(excution_butt, INPUT_PULLUP);
  
  pinMode(limitSwitch, INPUT_PULLUP);
  
  
  pinMode(bending_tool, OUTPUT);
  
 

  // Stepper motors max speed
  feederStepper.setMaxSpeed(2000);
  zAxisStepper.setMaxSpeed(2000);
  benderStepper.setMaxSpeed(2000);
  digitalWrite(bending_tool, UP); //Initial position, bending pin up

   while (digitalRead(limitSwitch) != 0) {
    benderStepper.setSpeed(1200);
    benderStepper.runSpeed();
    benderStepper.setCurrentPosition(0); // When limit switch pressed set position to 0 steps
  } 
  delay(40);
  // Move 1400 steps from the limit switch to starting position
  while (benderStepper.currentPosition() != -1000) {
    benderStepper.setSpeed(-1200); // if negative rotates anti-clockwise
    benderStepper.run();
  }
  benderStepper.setCurrentPosition(0);
  
  lcd.begin(16,2);
  beginning_lcd();
//  shaping(anyShape, 2);
}

void loop() {


  //
  while(1);
  if(digitalRead(increament_butt)){
    delay(10);   //debounsing
    while(digitalRead(increament_butt));
    state++;
    
    if(state > NUMBER_OF_SHAPES) state = NUMBER_OF_SHAPES;   //max number which you need reach 
    _display();
  }
  else if(digitalRead(decreament_butt)){
    delay(10);   //debounsing
    while(digitalRead(decreament_butt));
    state--;
    if(state < 1) state = 1;   //min number which you need reach 
    _display();
  }

  if(digitalRead(excution_butt)){
    delay(10);
    while(digitalRead(excution_butt));
    excution_display();
    switch(state){
      case 1:
         star();
         break;

      case 2:
         cube();
         break;

      case 3:
         stand();
         break;

      case 4:
         shaping(anyShape, 5);
         break;

      case 5:
         //calling function which you need to excute
         break;
    }
  }
  

}

void beginning_lcd(void){
  //lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(" Mommentum Team ");
  for(int i = 0; i < 16; i++){
    delay(190);
    lcd.setCursor(0,i);
    lcd.print(".");
  }
  delay(190);
  lcd.setCursor(0,0);
  lcd.print("     W.B.M.     ");
  lcd.setCursor(0,1);
  lcd.print("       V2       ");
  delay(3000);
}

void _display(void){
  lcd.setCursor(0,0);
  lcd.print("Select Shape:   ");
  lcd.setCursor(0,1);
  switch(state){
    case 1:
       lcd.print("      STAR      ");
       break;

    case 2:
       lcd.print("      CUBE      ");
       break;

    case 3:
       lcd.print("      STAND     ");
       break;

    default:
       lcd.print("                ");
  }

}

void excution_display(void){
  lcd.setCursor(0,0);
  switch(state){
    case 1:
       lcd.print("     \"STAR\"     ");
       break;

    case 2:
       lcd.print("     \"CUBE\"     ");
       break;

    case 3:
       lcd.print("    \"STAND\"     ");
       break;

    default:
       lcd.print("    NO SHAPE    ");
       lcd.setCursor(0,1);
       lcd.print("  IS SELECTED!  ");
       goto BREAK;
  }
  lcd.setCursor(0,1);
  lcd.print("   IS EXCUTED   ");
  BREAK:;
}

void star(void){
  while (count != 5) {
    int feed = 38; //  mm
    int feedDistance = round(convert_dis_to_steps(feed));
    while (feederStepper.currentPosition() != feedDistance) { // run until it reaches the distance value
      feederStepper.setSpeed(1200);
      feederStepper.run();
    }
    feederStepper.setCurrentPosition(0); // reset the current position to 0
    digitalWrite(bending_tool, UP); // Set the bender pin up
    delay(200);
    int angleConst = round(angle_const_for_bender); // angle constant
    // Bend the wire 52 degrees
    while (benderStepper.currentPosition() != -52 * angleConst) {
      benderStepper.setSpeed(-700);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(100);
    // Go back 52 degrees to initial position
    while (benderStepper.currentPosition() != 52 * angleConst) {
      benderStepper.setSpeed(1200);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(100);
    // Feed the same distance again
    while (feederStepper.currentPosition() != feedDistance) {
      feederStepper.setSpeed(1200);
      feederStepper.run();
    }
    feederStepper.setCurrentPosition(0);
    delay(100);
    digitalWrite(bending_tool, DOWN); // Set the bender pin down
    delay(200);
    // Set bender to new initial position, for bending in the other direction
    while (benderStepper.currentPosition() != -42 * angleConst) {
      benderStepper.setSpeed(-1200);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(200);
    digitalWrite(bending_tool, UP); // Bender pin up
    delay(200);
    while (benderStepper.currentPosition() != 105 * angleConst) {
      benderStepper.setSpeed(700);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(50);
    while (benderStepper.currentPosition() != -63 * angleConst) {
      benderStepper.setSpeed(-1200);
      benderStepper.run();
    }
    delay(100);
    digitalWrite(bending_tool, DOWN);
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    count++;
  }
  homing();
}

void cube(void){
  int feed = 30; //  mm
  int feedDistance = round(convert_dis_to_steps(feed));
  int angleConst = round(angle_const_for_bender);
  int angleConst_zAxis = round(angle_const_for_zAxis);
  // Step 1
  while (count != 3) {
    while (feederStepper.currentPosition() != feedDistance) {
      feederStepper.setSpeed(1200);
      feederStepper.run();
    }
    feederStepper.setCurrentPosition(0);
    delay(100);
    while (benderStepper.currentPosition() != -90 * angleConst) {
      benderStepper.setSpeed(-700);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(100);
    while (benderStepper.currentPosition() != 90 * angleConst) {
      benderStepper.setSpeed(1200);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(100);
    count++;
  }
  count = 0;
  // Step 2
  while (zAxisStepper.currentPosition() != 88 * angleConst_zAxis) {
    zAxisStepper.setSpeed(500);
    zAxisStepper.run();
  }
  current_zAxis += zAxisStepper.currentPosition();
  zAxisStepper.setCurrentPosition(0);
  delay(100);
  //Step 3
  while (count != 2) {
    while (feederStepper.currentPosition() != feedDistance) {
      feederStepper.setSpeed(1200);
      feederStepper.run();
    }
    feederStepper.setCurrentPosition(0);
    delay(100);
    while (benderStepper.currentPosition() != -90 * angleConst) {
      benderStepper.setSpeed(-700);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(100);
    while (benderStepper.currentPosition() != 90 * angleConst) {
      benderStepper.setSpeed(1200);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(100);
    count++;
  }
  count = 0;
  // Step 4
  while (zAxisStepper.currentPosition() != 85 * angleConst_zAxis) {
    zAxisStepper.setSpeed(500);
    zAxisStepper.run();
  }
  current_zAxis += zAxisStepper.currentPosition();
  zAxisStepper.setCurrentPosition(0);
  delay(100);
  // Step 5
  digitalWrite(bending_tool, DOWN);
  delay(200);
  while (benderStepper.currentPosition() != -42 * angleConst) {
    benderStepper.setSpeed(-1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  while (count != 3) {
    delay(100);
    digitalWrite(bending_tool, UP);
    delay(200);
    // Step 6
    while (feederStepper.currentPosition() != feedDistance) {
      feederStepper.setSpeed(1200);
      feederStepper.run();
    }
    feederStepper.setCurrentPosition(0);
    delay(100);
    while (benderStepper.currentPosition() != 90 * angleConst) {
      benderStepper.setSpeed(700);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(100);
    while (benderStepper.currentPosition() != -90 * angleConst) {
      benderStepper.setSpeed(-1200);
      benderStepper.run();
    }
    current_bending += benderStepper.currentPosition();
    benderStepper.setCurrentPosition(0);
    delay(100);
    count++;
  }
  count = 0;
  homing();
}

void stand(void){
  int feed = 20; // mm
  int feedDistance = round(convert_dis_to_steps(feed));
  int angleConst = round(angle_const_for_bender);
  int angleConst_zAxis = round(angle_const_for_zAxis);
  // Step 1
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != -90 * angleConst) {
    benderStepper.setSpeed(-700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != 90 * angleConst) {
    benderStepper.setSpeed(1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);

  // Step 2
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != -70 * angleConst) {
    benderStepper.setSpeed(-700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != 70 * angleConst) {
    benderStepper.setSpeed(1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);

  // Step 3
  feed = 80; // mm
  feedDistance = round(convert_dis_to_steps(feed));
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);
  delay(100);
  // Step 4
  digitalWrite(bending_tool, DOWN);
  delay(200);
  while (benderStepper.currentPosition() != -42 * angleConst) {
    benderStepper.setSpeed(-1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  digitalWrite(bending_tool, UP);
  delay(200);
  while (benderStepper.currentPosition() != 108 * angleConst) {
    benderStepper.setSpeed(700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != -66 * angleConst) {
    benderStepper.setSpeed(-1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);

  //Step 5
  digitalWrite(bending_tool, DOWN);
  delay(200);
  // Step 6
  feed = 80; // mm
  feedDistance = round(convert_dis_to_steps(feed));
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);
  digitalWrite(bending_tool, UP);
  delay(200);
  // Step 7
  while (zAxisStepper.currentPosition() != -90 * angleConst_zAxis) {
    zAxisStepper.setSpeed(-500);
    zAxisStepper.run();
  }
  current_zAxis += zAxisStepper.currentPosition();
  zAxisStepper.setCurrentPosition(0);
  delay(100);

  // Step 8
  while (benderStepper.currentPosition() != -90 * angleConst) {
    benderStepper.setSpeed(-700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != 90 * angleConst) {
    benderStepper.setSpeed(1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  // Step 6
  feed = 45; // mm
  feedDistance = round(convert_dis_to_steps(feed));
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);
  // Step 10
  while (benderStepper.currentPosition() != -90 * angleConst) {
    benderStepper.setSpeed(-700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != 48 * angleConst) {
    benderStepper.setSpeed(1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);

  // Step 11
  while (zAxisStepper.currentPosition() != 90 * angleConst_zAxis) {
    zAxisStepper.setSpeed(500);
    zAxisStepper.run();
  }
  current_zAxis += zAxisStepper.currentPosition();
  zAxisStepper.setCurrentPosition(0);
  delay(100);
  feed = 80; // mm
  feedDistance = round(convert_dis_to_steps(feed));
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);

  // Step 12
  while (benderStepper.currentPosition() != 110 * angleConst) {
    benderStepper.setSpeed(700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != -68 * angleConst) {
    benderStepper.setSpeed(-1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  //Step 13
  digitalWrite(bending_tool, DOWN);
  delay(200);
  feed = 80; // mm
  feedDistance = round(convert_dis_to_steps(feed));
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);
  digitalWrite(bending_tool, UP);
  delay(200);

  // Step 14
  while (benderStepper.currentPosition() != -70 * angleConst) {
    benderStepper.setSpeed(-700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != 70 * angleConst) {
    benderStepper.setSpeed(1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);

  //Step 15
  feed = 25; // mm
  feedDistance = round(convert_dis_to_steps(feed));
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);
  delay(100);
  // Step 16
  while (benderStepper.currentPosition() != -90 * angleConst) {
    benderStepper.setSpeed(-700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
  while (benderStepper.currentPosition() != 90 * angleConst) {
    benderStepper.setSpeed(1200);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);

  // Step 17
  while (feederStepper.currentPosition() != feedDistance) {
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0);
  homing();
}

void manual(void){
  int sign;
  String dataInS;
  int angle;
  int angleConst;
  Serial.println("  // MANUAL MODE //");
  while (!dataIn.startsWith("end")) {
    digitalWrite(bending_tool, DOWN);
    delay(200);
    dataIn = Serial.readString();
    if (dataIn.startsWith("f")) {
      dataInS = dataIn.substring(1, dataIn.length()); // reads the feed value
      dist = dataInS.toInt();
      Serial.print("Feed ");
      Serial.print(dist);
      Serial.println("mm wire.");
      dist = dist * round(distance_const);
      while (feederStepper.currentPosition() != dist) {
        feederStepper.setSpeed(1200);
        feederStepper.run();
      }
      feederStepper.setCurrentPosition(0);
      delay(100);
    }
    if (dataIn.startsWith("b")) { 
      if (dataIn.charAt(1) == '-') { 
        dataInS = dataIn.substring(2, dataIn.length()); ///reads the angle value
        angle = dataInS.toInt();
        Serial.print("Bend -");
        Serial.print(angle);
        Serial.println(" degrees.");
        angleConst = round(angle_const_for_bender);
        // Set "negative" bending initial position
        while (benderStepper.currentPosition() != -43 * angleConst) {
          benderStepper.setSpeed(-1200);
          benderStepper.run();
        }
        benderStepper.setCurrentPosition(0);
        delay(100);
        digitalWrite(bending_tool, UP);
        delay(200);
        // Bend the wire
        while (benderStepper.currentPosition() != angle * angleConst) {
          benderStepper.setSpeed(700);
          benderStepper.run();
        }
        benderStepper.setCurrentPosition(0);
        delay(100);
        while (benderStepper.currentPosition() != (-1) * angle * angleConst) {
          benderStepper.setSpeed(-1200);
          benderStepper.run();
        }
        benderStepper.setCurrentPosition(0);
        delay(100);
        digitalWrite(bending_tool, DOWN);
        delay(200);
        // Get back to original "positive" bending initial poistion
        while (benderStepper.currentPosition() != 43 * angleConst) {
          benderStepper.setSpeed(1200);
          benderStepper.run();
        }
        benderStepper.setCurrentPosition(0);
        delay(100);
      }
      else {
        dataInS = dataIn.substring(1, dataIn.length());
        angle = dataInS.toInt();
        Serial.print("Bend ");
        Serial.print(angle);
        Serial.println(" degrees.");
        angleConst = round(angle_const_for_bender);
        digitalWrite(bending_tool, UP);
        delay(200);
        while (benderStepper.currentPosition() != (-1) *angle * angleConst) {
          benderStepper.setSpeed(-700);
          benderStepper.run();
        }
        benderStepper.setCurrentPosition(0);
        delay(100);
        while (benderStepper.currentPosition() != angle * angleConst) {
          benderStepper.setSpeed(1200);
          benderStepper.run();
        }
        benderStepper.setCurrentPosition(0);
        delay(100);
      }
      dataInS = dataIn.substring(2, dataIn.length());
      angle = dataInS.toInt();
      angleConst = round(angle_const_for_bender);
      while (benderStepper.currentPosition() != sign * angle * angleConst) {
        benderStepper.setSpeed(-700);
        benderStepper.run();
      }
      benderStepper.setCurrentPosition(0);
      delay(100);
      while (benderStepper.currentPosition() != sign * angle * angleConst) {
        benderStepper.setSpeed(1200);
        benderStepper.run();
      }
      benderStepper.setCurrentPosition(0);
      delay(100);
    }
    // Z-Axis Control
    if (dataIn.startsWith("z")) {
      if (dataIn.charAt(1) == '-') {
        dataInS = dataIn.substring(2, dataIn.length());
        angle = dataInS.toInt();
        Serial.print("Move Z-Axis -");
        Serial.print(angle);
        Serial.println(" degrees.");
        angleConst = round(angle_const_for_zAxis);
        while (zAxisStepper.currentPosition() != angle * angleConst) {
          zAxisStepper.setSpeed(500);
          zAxisStepper.run();
        }
        zAxisStepper.setCurrentPosition(0);
        delay(100);
      }
      else {
        dataInS = dataIn.substring(1, dataIn.length());
        angle = dataInS.toInt();
        Serial.print("Move Z-Axis ");
        Serial.print(angle);
        Serial.println(" degrees.");
        angleConst = round(angle_const_for_zAxis);
        while (zAxisStepper.currentPosition() != (-1) *angle * angleConst) {
          zAxisStepper.setSpeed(-500);
          zAxisStepper.run();
        }
        zAxisStepper.setCurrentPosition(0);
        delay(100);
      }
    }
    manualStatus = dataIn;
  }
}

void feeding(int dis){
  dis = round(convert_dis_to_steps(dis));
  while (feederStepper.currentPosition() != dis) { // run until it reaches the distance value
    feederStepper.setSpeed(1200);
    feederStepper.run();
  }
  feederStepper.setCurrentPosition(0); // reset the current position to 0
  delay(200);
}

void ben_tool(bool c){
  digitalWrite(bending_tool, c);
  delay(50);
}

void bending(int angle){
  angle = round(convert_deg_to_steps_for_bender(angle));
  while (benderStepper.currentPosition() != angle) {
    (angle > 0)? benderStepper.setSpeed(700) : benderStepper.setSpeed(-700);
    benderStepper.run();
  }
  current_bending += benderStepper.currentPosition();
  benderStepper.setCurrentPosition(0);
  delay(100);
}

void rotate_zAxis(int angle){
  angle = round(convert_deg_to_steps_for_zAxis(angle));
  while (zAxisStepper.currentPosition() != angle) {
    (angle > 0)? zAxisStepper.setSpeed(500) : zAxisStepper.setSpeed(-500);
    zAxisStepper.run();
  }
  current_zAxis += zAxisStepper.currentPosition();
  zAxisStepper.setCurrentPosition(0);
  delay(100);
}

void homing(void){
  //while(digitalRead(excution_butt));
  delay(10);
  ben_tool(DOWN);
  home_bender();
  home_zAxis();
  ben_tool(UP);
}

void home_bender(void){
  benderStepper.setCurrentPosition(current_bending);
  while (benderStepper.currentPosition() != 0) {
    (current_bending * -1 > 0)? benderStepper.setSpeed(1200) : benderStepper.setSpeed(-1200);
    benderStepper.run();
  }
  current_bending = benderStepper.currentPosition();
  //benderStepper.setCurrentPosition(0);
  delay(100);
}

void home_zAxis(void){
  zAxisStepper.setCurrentPosition(current_zAxis);
  while (zAxisStepper.currentPosition() != 0) {
    (current_zAxis * -1 > 0)? zAxisStepper.setSpeed(700) : zAxisStepper.setSpeed(-700);
    zAxisStepper.run();
  }
  current_zAxis = zAxisStepper.currentPosition();
  //zAxisStepper.setCurrentPosition(0);
  delay(100);
}

void shaping(const int buffer[][2], byte tasks){
  for(byte i = 0 ; i < tasks; i++){
    switch(buffer[i][0]){
      case feeder:
         feeding(buffer[i][1]);
         break;

      case bender:
         bending(buffer[i][1]);
         break;

      case rotate:
         rotate_zAxis(buffer[i][1]);
         break;

      case tool:
         ben_tool(buffer[i][1]);
         
    }
  }
  homing();
}
